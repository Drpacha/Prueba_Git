git init // inicia el seguimiento de archivos de una carpeta
git add "" // traslada los archivos a git para segimiento es como sacar una beta
se utiliza asi : $ git add "NOMBRE DEL ARCHIVO.tipo de archivo".
git add . // lleva al staging area todo los archivos de la carpeta.
git commit // guarda la copia o snapshot.
git commit -am "DESCRIPCION" // hace un add y un commit a la vez con descripcion
NOTAS: puedes usar git commit -m "mensaje" para escrbir el mensaje directamente
y si llegas a la consola escribes el mensaje arriba, luego presionas "esc + :wq + enter"
git status -s // permite ver que esta siendo guardado esta en stagin o en commit
git log --oneline // sirve para ver el historial de copias
git reset --hard "codigo de la snapshot" // restaura y borra el archivo hasta la version seleccionada 
git commit --amend // modificar descripcion atravez de los comando de linux :i borras , esc , :i escribes, esc.

GITHUB

despues de crear el repositorio en la pagina de Github
en la parte de "push an existing repository" copias la primera linea en el hit bash que estes utilizando git.

**Esto lo edite desde GITHUB** y **traje atravez de la instruccion "git pull origin master" en Git**.
>>>>>>> 1e911f1a87310966201c618380491d674e5ce9d5
 **SI HAY ERRORES TRATA DE GUARDAR OTRA VEZ CON EL "git commit -am "descripcion"**
                    ***Esto se escribio desde mi pc***

COMANDO CON INTERACCIONES CON EL GIT Y EL GITHUB.
git push origin master// esto sirve para enviar la informacion del pc al repositorio "master" puede ser cualquier rama
git pull origin master// trae informacion del repositorio al pc, "master puede ser cualquier rama"

RELASE Y TAGS
para generar versiones en un futuro descargables ya que todo esto son snapshots utilizaremos el comando
git tag *datos de informacion* -m "DESCRIPCION" //crear version y tags de un archivo.
git push --tag // subir tag a github
